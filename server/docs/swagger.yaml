definitions:
  app.AccessTokenResponse:
    properties:
      access_token:
        type: string
      timeout:
        type: integer
    type: object
  app.AddCardInput:
    properties:
      token_id:
        type: string
      token_type:
        type: string
    required:
    - token_id
    - token_type
    type: object
  app.AddVoucherInput:
    properties:
      voucher:
        type: string
    required:
    - voucher
    type: object
  app.AdminAnnouncement:
    properties:
      announcement:
        type: string
      subject:
        type: string
    required:
    - announcement
    - subject
    type: object
  app.ApplyForVoucherInput:
    properties:
      balance:
        minimum: 0
        type: integer
      reason:
        type: string
    required:
    - balance
    - reason
    type: object
  app.ChangePasswordInput:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - confirm_password
    - email
    - password
    type: object
  app.ChargeBalance:
    properties:
      amount:
        type: number
      payment_method_id:
        type: string
    required:
    - amount
    - payment_method_id
    type: object
  app.CodeTimeout:
    properties:
      timeout:
        type: integer
    required:
    - timeout
    type: object
  app.DeployVMInput:
    properties:
      name:
        maxLength: 20
        minLength: 3
        type: string
      public:
        type: boolean
      region:
        type: string
      resources:
        type: string
    required:
    - name
    - resources
    type: object
  app.EmailInput:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  app.EmailUser:
    properties:
      body:
        type: string
      email:
        type: string
      subject:
        type: string
    required:
    - body
    - email
    - subject
    type: object
  app.GenerateVoucherInput:
    properties:
      balance:
        type: integer
      length:
        maximum: 20
        minimum: 3
        type: integer
    required:
    - balance
    - length
    type: object
  app.K8sDeployInput:
    properties:
      master_name:
        maxLength: 20
        minLength: 3
        type: string
      public:
        type: boolean
      region:
        type: string
      resources:
        type: string
      workers:
        items:
          $ref: '#/definitions/app.WorkerInput'
        type: array
    type: object
  app.ListDeploymentsResponse:
    properties:
      k8s:
        items:
          $ref: '#/definitions/models.K8sCluster'
        type: array
      vms:
        items:
          $ref: '#/definitions/models.VM'
        type: array
    type: object
  app.PayInvoiceInput:
    properties:
      card_payment_id:
        type: string
      method:
        $ref: '#/definitions/app.method'
    required:
    - method
    type: object
  app.RefreshTokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      timeout:
        type: integer
    type: object
  app.SetAdminInput:
    properties:
      admin:
        type: boolean
      email:
        type: string
    required:
    - admin
    - email
    type: object
  app.SetDefaultCardInput:
    properties:
      payment_method_id:
        type: string
    required:
    - payment_method_id
    type: object
  app.SetPricesInput:
    properties:
      large:
        type: number
      medium:
        type: number
      public_ip:
        type: number
      small:
        type: number
    type: object
  app.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  app.SignUpInput:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        maxLength: 20
        minLength: 3
        type: string
      last_name:
        maxLength: 20
        minLength: 3
        type: string
      password:
        type: string
      ssh_key:
        type: string
    required:
    - confirm_password
    - email
    - first_name
    - last_name
    - password
    type: object
  app.UpdateMaintenanceInput:
    properties:
      "on":
        type: boolean
    required:
    - "on"
    type: object
  app.UpdateNextLaunchInput:
    properties:
      launched:
        type: boolean
    required:
    - launched
    type: object
  app.UpdateUserInput:
    properties:
      confirm_password:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      ssh_key:
        type: string
    type: object
  app.UpdateVoucherInput:
    properties:
      approved:
        type: boolean
    required:
    - approved
    type: object
  app.VerifyCodeInput:
    properties:
      code:
        type: integer
      email:
        type: string
    required:
    - code
    - email
    type: object
  app.WorkerInput:
    properties:
      name:
        maxLength: 20
        minLength: 3
        type: string
      resources:
        type: string
    type: object
  app.method:
    enum:
    - card
    - balance
    - voucher
    - voucher+balance
    - voucher+card
    - balance+card
    - voucher+balance+card
    type: string
    x-enum-varnames:
    - card
    - balance
    - voucher
    - voucherAndBalance
    - voucherAndCard
    - balanceAndCard
    - voucherAndBalanceAndCard
  models.Card:
    properties:
      brand:
        type: string
      card_type:
        type: string
      customer_id:
        type: string
      exp_month:
        type: integer
      exp_year:
        type: integer
      fingerprint:
        type: string
      id:
        type: integer
      last_4:
        type: string
      payment_method_id:
        type: string
      user_id:
        type: string
    required:
    - card_type
    - customer_id
    - fingerprint
    - payment_method_id
    - user_id
    type: object
  models.DeploymentItem:
    properties:
      cost:
        type: number
      deployment_id:
        type: integer
      has_public_ip:
        type: boolean
      id:
        type: integer
      invoice_id:
        type: integer
      period:
        type: number
      resources:
        type: string
      type:
        type: string
    type: object
  models.DeploymentsCount:
    properties:
      ips:
        type: integer
      vms:
        type: integer
    type: object
  models.Invoice:
    properties:
      created_at:
        type: string
      deployments:
        items:
          $ref: '#/definitions/models.DeploymentItem'
        type: array
      id:
        type: integer
      last_remainder_at:
        type: string
      paid:
        type: boolean
      paid_at:
        type: string
      payment_details:
        $ref: '#/definitions/models.PaymentDetails'
      tax:
        description: 'TODO:'
        type: number
      total:
        type: number
      user_id:
        type: string
    required:
    - user_id
    type: object
  models.K8sCluster:
    properties:
      contract_id:
        type: integer
      created_at:
        type: string
      failure:
        type: string
      id:
        type: integer
      master:
        $ref: '#/definitions/models.Master'
      network_contract_id:
        type: integer
      price:
        type: number
      state:
        type: string
      userID:
        type: string
      workers:
        items:
          $ref: '#/definitions/models.Worker'
        type: array
    type: object
  models.Maintenance:
    properties:
      active:
        type: boolean
      id:
        type: integer
      updated_at:
        type: string
    type: object
  models.Master:
    properties:
      clusterID:
        type: integer
      cru:
        type: integer
      mru:
        type: integer
      mycelium_ip:
        type: string
      name:
        type: string
      public:
        type: boolean
      public_ip:
        type: string
      region:
        type: string
      resources:
        type: string
      sru:
        type: integer
      ygg_ip:
        type: string
    required:
    - name
    type: object
  models.NextLaunch:
    properties:
      id:
        type: integer
      launched:
        type: boolean
      updated_at:
        type: string
    type: object
  models.Notification:
    properties:
      id:
        type: integer
      msg:
        type: string
      seen:
        type: boolean
      type:
        description: to allow redirecting from notifications to the right pages
        type: string
      user_id:
        type: string
    required:
    - msg
    - seen
    - type
    - user_id
    type: object
  models.PaymentDetails:
    properties:
      balance:
        type: number
      card:
        type: number
      id:
        type: integer
      invoice_id:
        type: integer
      voucher_balance:
        type: number
    type: object
  models.User:
    properties:
      admin:
        description: checks if user type is admin
        type: boolean
      balance:
        type: number
      code:
        type: integer
      email:
        type: string
      first_name:
        type: string
      hashed_password:
        items:
          type: integer
        type: array
      id:
        type: string
      last_name:
        type: string
      ssh_key:
        type: string
      stripe_customer_id:
        type: string
      stripe_default_payment_id:
        type: string
      updated_at:
        type: string
      verified:
        type: boolean
      voucher_balance:
        type: number
    required:
    - email
    - first_name
    - hashed_password
    - last_name
    type: object
  models.VM:
    properties:
      contractID:
        type: integer
      created_at:
        type: string
      cru:
        type: integer
      failure:
        type: string
      id:
        type: integer
      mru:
        type: integer
      mycelium_ip:
        type: string
      name:
        type: string
      networkContractID:
        type: integer
      price:
        type: number
      public:
        type: boolean
      public_ip:
        type: string
      region:
        type: string
      resources:
        type: string
      sru:
        type: integer
      state:
        type: string
      user_id:
        type: string
      ygg_ip:
        type: string
    required:
    - name
    type: object
  models.Voucher:
    properties:
      approved:
        type: boolean
      balance:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      reason:
        type: string
      rejected:
        type: boolean
      updated_at:
        type: string
      used:
        type: boolean
      user_id:
        type: string
      voucher:
        type: string
    required:
    - approved
    - balance
    - reason
    - rejected
    - used
    - user_id
    type: object
  models.Worker:
    properties:
      clusterID:
        type: integer
      cru:
        type: integer
      mru:
        type: integer
      mycelium_ip:
        type: string
      name:
        type: string
      public:
        type: boolean
      public_ip:
        type: string
      region:
        type: string
      resources:
        type: string
      sru:
        type: integer
      ygg_ip:
        type: string
    required:
    - name
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is C4All API documentation using Swagger in Golang
  license:
    name: Apache
    url: https://www.apache.org/licenses/LICENSE-2.0
  title: C4All API
  version: "1.0"
paths:
  /announcement:
    post:
      consumes:
      - application/json
      description: Creates a new administrator announcement and sends it to all users
        as an email and notification
      parameters:
      - description: announcement to be created
        in: body
        name: announcement
        required: true
        schema:
          $ref: '#/definitions/app.AdminAnnouncement'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Creates a new administrator announcement and sends it to all users
        as an email and notification
      tags:
      - Admin
  /balance:
    get:
      consumes:
      - application/json
      description: Get main TF account balance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get main TF account balance
      tags:
      - Admin
  /deployments:
    delete:
      consumes:
      - application/json
      description: Deletes all users' deployments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Deletes all users' deployments
      tags:
      - Admin
    get:
      consumes:
      - application/json
      description: List all users' deployments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/app.ListDeploymentsResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: List all users' deployments
      tags:
      - Admin
  /deployments/count:
    get:
      consumes:
      - application/json
      description: Get users' deployments count in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeploymentsCount'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get users' deployments count
      tags:
      - Admin
  /email:
    post:
      consumes:
      - application/json
      description: Creates a new administrator email and sends it to a specific user
        as an email and notification
      parameters:
      - description: email to be sent
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/app.EmailUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Creates a new administrator email and sends it to a specific user as
        an email and notification
      tags:
      - Admin
  /invoice:
    get:
      consumes:
      - application/json
      description: Lists user's invoices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Invoice'
            type: array
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Lists user's invoices
      tags:
      - Invoice
  /invoice/{id}:
    get:
      consumes:
      - application/json
      description: Gets user's invoice by ID
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Invoice'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Gets user's invoice by ID
      tags:
      - Invoice
  /invoice/all:
    get:
      consumes:
      - application/json
      description: List all invoices in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Invoice'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: List all invoices
      tags:
      - Admin
  /invoice/pay/{id}:
    put:
      consumes:
      - application/json
      description: Pay user's invoice
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      - description: Payment method and ID
        in: body
        name: payment
        required: true
        schema:
          $ref: '#/definitions/app.PayInvoiceInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Pay user's invoice
      tags:
      - Invoice
  /k8s:
    delete:
      consumes:
      - application/json
      description: Delete all user's kubernetes deployments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete all user's kubernetes deployments
      tags:
      - Kubernetes
    get:
      consumes:
      - application/json
      description: Get user's kubernetes deployments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.K8sCluster'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user's kubernetes deployments
      tags:
      - Kubernetes
    post:
      consumes:
      - application/json
      description: Deploy kubernetes
      parameters:
      - description: Kubernetes deployment input
        in: body
        name: kubernetes
        required: true
        schema:
          $ref: '#/definitions/app.K8sDeployInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Deploy kubernetes
      tags:
      - Kubernetes
  /k8s/{id}:
    delete:
      consumes:
      - application/json
      description: Delete kubernetes deployment using ID
      parameters:
      - description: Kubernetes cluster ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete kubernetes deployment using ID
      tags:
      - Kubernetes
    get:
      consumes:
      - application/json
      description: Get kubernetes deployment using ID
      parameters:
      - description: Kubernetes cluster ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.K8sCluster'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get kubernetes deployment using ID
      tags:
      - Kubernetes
  /k8s/validate/{name}:
    get:
      consumes:
      - application/json
      description: Validate kubernetes name
      parameters:
      - description: Kubernetes name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Validate kubernetes name
      tags:
      - Kubernetes
  /maintenance:
    get:
      consumes:
      - application/json
      description: Gets maintenance flag
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Maintenance'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Gets maintenance flag
      tags:
      - Unauthorized/Authorized
    put:
      consumes:
      - application/json
      description: Updates maintenance flag
      parameters:
      - description: Maintenance value to be set
        in: body
        name: maintenance
        required: true
        schema:
          $ref: '#/definitions/app.UpdateMaintenanceInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Updates maintenance flag
      tags:
      - Admin
  /nextlaunch:
    get:
      consumes:
      - application/json
      description: Gets next launch state
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NextLaunch'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Gets next launch state
      tags:
      - Unauthorized/Authorized
    put:
      consumes:
      - application/json
      description: Updates next launch flag
      parameters:
      - description: Next launch value to be set
        in: body
        name: nextlaunch
        required: true
        schema:
          $ref: '#/definitions/app.UpdateNextLaunchInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Updates next launch flag
      tags:
      - Admin
  /notification:
    get:
      consumes:
      - application/json
      description: Lists user's notifications
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Notification'
            type: array
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Lists user's notifications
      tags:
      - Notification
  /notification/{id}:
    put:
      consumes:
      - application/json
      description: Set user's notifications as seen
      parameters:
      - description: Notification ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Set user's notifications as seen
      tags:
      - Notification
  /region:
    get:
      consumes:
      - application/json
      description: List all supported regions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: List all supported regions
      tags:
      - Region
  /set_admin:
    put:
      consumes:
      - application/json
      description: Sets a user as an admin
      parameters:
      - description: User to be set as admin
        in: body
        name: setAdmin
        required: true
        schema:
          $ref: '#/definitions/app.SetAdminInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Sets a user as an admin
      tags:
      - Admin
  /set_prices:
    put:
      consumes:
      - application/json
      description: Set vms and public ips prices prices
      parameters:
      - description: Prices to be set
        in: body
        name: prices
        required: true
        schema:
          $ref: '#/definitions/app.SetPricesInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - BearerAuth: []
      summary: Set prices
      tags:
      - Admin
  /user:
    delete:
      consumes:
      - application/json
      description: Deletes account for user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Deletes account for user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Get user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Change user data
      parameters:
      - description: User updates
        in: body
        name: updates
        required: true
        schema:
          $ref: '#/definitions/app.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Change user data
      tags:
      - User
  /user/activate_voucher:
    put:
      consumes:
      - application/json
      description: Activate a voucher
      parameters:
      - description: Voucher input
        in: body
        name: voucher
        required: true
        schema:
          $ref: '#/definitions/app.AddVoucherInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Activate a voucher
      tags:
      - User
  /user/all:
    get:
      consumes:
      - application/json
      description: List all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - Admin
  /user/apply_voucher:
    post:
      consumes:
      - application/json
      description: Apply for a new voucher
      parameters:
      - description: New voucher details
        in: body
        name: voucher
        required: true
        schema:
          $ref: '#/definitions/app.ApplyForVoucherInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Apply for a new voucher
      tags:
      - User
  /user/card:
    get:
      consumes:
      - application/json
      description: List user's cards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Card'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: List user's cards
      tags:
      - Card
    post:
      consumes:
      - application/json
      description: Add a new card
      parameters:
      - description: Card input
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/app.AddCardInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Add a new card
      tags:
      - Card
  /user/card/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user card
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete user card
      tags:
      - Card
  /user/card/default:
    put:
      consumes:
      - application/json
      description: Set card as default
      parameters:
      - description: Card input
        in: body
        name: card
        required: true
        schema:
          $ref: '#/definitions/app.SetDefaultCardInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Set card as default
      tags:
      - Card
  /user/change_password:
    put:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/app.ChangePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Change user password
      tags:
      - User
  /user/charge_balance:
    put:
      consumes:
      - application/json
      description: Charge user balance
      parameters:
      - description: Balance charging details
        in: body
        name: balance
        required: true
        schema:
          $ref: '#/definitions/app.ChargeBalance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Charge user balance
      tags:
      - User
  /user/forget_password/verify_email:
    post:
      consumes:
      - application/json
      description: Verify user's email to reset password
      parameters:
      - description: User Verify forget password input
        in: body
        name: forgetPassword
        required: true
        schema:
          $ref: '#/definitions/app.VerifyCodeInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.AccessTokenResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Verify user's email to reset password
      tags:
      - User
  /user/forgot_password:
    post:
      consumes:
      - application/json
      description: Send code to forget password email for verification
      parameters:
      - description: User forget password input
        in: body
        name: forgetPassword
        required: true
        schema:
          $ref: '#/definitions/app.EmailInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.CodeTimeout'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Send code to forget password email for verification
      tags:
      - User
  /user/refresh_token:
    post:
      consumes:
      - application/json
      description: Generate a refresh token
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Generate a refresh token
      tags:
      - User
  /user/signin:
    post:
      consumes:
      - application/json
      description: Sign in user
      parameters:
      - description: User login input
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/app.SignInInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.AccessTokenResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Sign in user
      tags:
      - User
  /user/signup:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User registration input
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/app.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/app.CodeTimeout'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register a new user
      tags:
      - User
  /user/signup/verify_email:
    post:
      consumes:
      - application/json
      description: Verify new user's registration
      parameters:
      - description: Verification code input
        in: body
        name: code
        required: true
        schema:
          $ref: '#/definitions/app.VerifyCodeInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Verify new user's registration
      tags:
      - User
  /vm:
    delete:
      consumes:
      - application/json
      description: Delete all user's virtual machine deployments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete all user's virtual machine deployments
      tags:
      - VM
    get:
      consumes:
      - application/json
      description: Get user's virtual machine deployments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.VM'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get user's virtual machine deployments
      tags:
      - VM
    post:
      consumes:
      - application/json
      description: Deploy virtual machine
      parameters:
      - description: virtual machine deployment input
        in: body
        name: vm
        required: true
        schema:
          $ref: '#/definitions/app.DeployVMInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Deploy virtual machine
      tags:
      - VM
  /vm/{id}:
    delete:
      consumes:
      - application/json
      description: Delete virtual machine deployment using ID
      parameters:
      - description: Virtual machine ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Delete virtual machine deployment using ID
      tags:
      - VM
    get:
      consumes:
      - application/json
      description: Get virtual machine deployment using ID
      parameters:
      - description: Virtual machine ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.VM'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Get virtual machine deployment using ID
      tags:
      - VM
  /vm/validate/{name}:
    get:
      consumes:
      - application/json
      description: Validate virtual machine name
      parameters:
      - description: Virtual machine name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Validate virtual machine name
      tags:
      - VM
  /voucher:
    get:
      consumes:
      - application/json
      description: Lists users' vouchers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Voucher'
            type: array
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Lists users' vouchers
      tags:
      - Voucher (only admins)
    post:
      consumes:
      - application/json
      description: Generates a new voucher
      parameters:
      - description: Voucher details
        in: body
        name: voucher
        required: true
        schema:
          $ref: '#/definitions/app.GenerateVoucherInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Generates a new voucher
      tags:
      - Voucher (only admins)
    put:
      consumes:
      - application/json
      description: Approve all vouchers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Approve all vouchers
      tags:
      - Voucher (only admins)
  /voucher/{id}:
    put:
      consumes:
      - application/json
      description: Update (approve-reject) a voucher
      parameters:
      - description: Voucher ID
        in: path
        name: id
        required: true
        type: string
      - description: Voucher approval state
        in: body
        name: state
        required: true
        schema:
          $ref: '#/definitions/app.UpdateVoucherInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Update (approve-reject) a voucher
      tags:
      - Voucher (only admins)
  /voucher/all/reset:
    put:
      consumes:
      - application/json
      description: Resets all users voucher balance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: number
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - BearerAuth: []
      summary: Resets all users voucher balance
      tags:
      - Voucher (only admins)
swagger: "2.0"
